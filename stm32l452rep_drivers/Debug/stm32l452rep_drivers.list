
stm32l452rep_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000142c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080015cc  080015cc  000025cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001628  08001628  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001628  08001628  00002628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001630  08001630  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001630  08001630  00002630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001634  08001634  00002634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001638  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a20  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000680  00000000  00000000  00004aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00005130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011c  00000000  00000000  000052d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020e6  00000000  00000000  000053ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000265a  00000000  00000000  000074d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d215  00000000  00000000  00009b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00096d41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cc8  00000000  00000000  00096d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00097a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080015b4 	.word	0x080015b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080015b4 	.word	0x080015b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#define PIN5				(1U<<13)
#define LED_PIN				PIN5
#define AF1_TIM				(1U<<20)
static void systick_callback(void);

int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= GPIOBEN;
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <main+0x54>)
 8000286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000288:	4a12      	ldr	r2, [pc, #72]	@ (80002d4 <main+0x54>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOB->MODER |= (1U << 26);
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <main+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <main+0x58>)
 8000296:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800029a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U << 27);
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <main+0x58>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <main+0x58>)
 80002a2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOB->ODR ^= LED_PIN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <main+0x58>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <main+0x58>)
 80002ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80002b2:	6153      	str	r3, [r2, #20]
	GPIOB->ODR ^= LED_PIN;
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <main+0x58>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <main+0x58>)
 80002ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80002be:	6153      	str	r3, [r2, #20]

	uart2_tx_init();
 80002c0:	f000 f934 	bl	800052c <uart2_tx_init>
	tim1_1hz_interrupt_init();
 80002c4:	f000 f8e6 	bl	8000494 <tim1_1hz_interrupt_init>
	printf("INIT!\r\n");
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <main+0x5c>)
 80002ca:	f000 fb0f 	bl	80008ec <puts>
	while (1)
 80002ce:	bf00      	nop
 80002d0:	e7fd      	b.n	80002ce <main+0x4e>
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000
 80002d8:	48000400 	.word	0x48000400
 80002dc:	080015cc 	.word	0x080015cc

080002e0 <systick_callback>:

    }
}

static void systick_callback(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	printf("A second passed from systick\n\r");
 80002e4:	4802      	ldr	r0, [pc, #8]	@ (80002f0 <systick_callback+0x10>)
 80002e6:	f000 fa99 	bl	800081c <iprintf>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	080015d4 	.word	0x080015d4

080002f4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void) //tabela de vectori pt intreruperi!!!
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	TIM1->SR &=~SR_UIF;
 80002f8:	4b04      	ldr	r3, [pc, #16]	@ (800030c <TIM1_UP_TIM16_IRQHandler+0x18>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a03      	ldr	r2, [pc, #12]	@ (800030c <TIM1_UP_TIM16_IRQHandler+0x18>)
 80002fe:	f023 0301 	bic.w	r3, r3, #1
 8000302:	6113      	str	r3, [r2, #16]
	//Clear update interrupt flag
	systick_callback();
 8000304:	f7ff ffec 	bl	80002e0 <systick_callback>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40012c00 	.word	0x40012c00

08000310 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031c:	2300      	movs	r3, #0
 800031e:	617b      	str	r3, [r7, #20]
 8000320:	e00a      	b.n	8000338 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000322:	f3af 8000 	nop.w
 8000326:	4601      	mov	r1, r0
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	1c5a      	adds	r2, r3, #1
 800032c:	60ba      	str	r2, [r7, #8]
 800032e:	b2ca      	uxtb	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	3301      	adds	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	dbf0      	blt.n	8000322 <_read+0x12>
  }

  return len;
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b086      	sub	sp, #24
 800034e:	af00      	add	r7, sp, #0
 8000350:	60f8      	str	r0, [r7, #12]
 8000352:	60b9      	str	r1, [r7, #8]
 8000354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	e009      	b.n	8000370 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	60ba      	str	r2, [r7, #8]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f8bb 	bl	80004e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	3301      	adds	r3, #1
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	429a      	cmp	r2, r3
 8000376:	dbf1      	blt.n	800035c <_write+0x12>
  }
  return len;
 8000378:	687b      	ldr	r3, [r7, #4]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <_close>:

int _close(int file)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003aa:	605a      	str	r2, [r3, #4]
  return 0;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <_isatty>:

int _isatty(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003c2:	2301      	movs	r3, #1
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
	...

080003ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f4:	4a14      	ldr	r2, [pc, #80]	@ (8000448 <_sbrk+0x5c>)
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <_sbrk+0x60>)
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <_sbrk+0x64>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d102      	bne.n	800040e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <_sbrk+0x64>)
 800040a:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <_sbrk+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800040e:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <_sbrk+0x64>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	693a      	ldr	r2, [r7, #16]
 8000418:	429a      	cmp	r2, r3
 800041a:	d207      	bcs.n	800042c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800041c:	f000 fb94 	bl	8000b48 <__errno>
 8000420:	4603      	mov	r3, r0
 8000422:	220c      	movs	r2, #12
 8000424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
 800042a:	e009      	b.n	8000440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800042c:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000432:	4b07      	ldr	r3, [pc, #28]	@ (8000450 <_sbrk+0x64>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <_sbrk+0x64>)
 800043c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800043e:	68fb      	ldr	r3, [r7, #12]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20028000 	.word	0x20028000
 800044c:	00000400 	.word	0x00000400
 8000450:	20000078 	.word	0x20000078
 8000454:	200001c8 	.word	0x200001c8

08000458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	2b00      	cmp	r3, #0
 8000468:	db0b      	blt.n	8000482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f003 021f 	and.w	r2, r3, #31
 8000470:	4907      	ldr	r1, [pc, #28]	@ (8000490 <__NVIC_EnableIRQ+0x38>)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	095b      	lsrs	r3, r3, #5
 8000478:	2001      	movs	r0, #1
 800047a:	fa00 f202 	lsl.w	r2, r0, r2
 800047e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000e100 	.word	0xe000e100

08000494 <tim1_1hz_interrupt_init>:
	//Enable the timer
	TIM1->CR1 = CR1_CEN;
}

void tim1_1hz_interrupt_init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	//Enable clock access for timer 1.
	RCC->APB2ENR |= TIM1EN;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <tim1_1hz_interrupt_init+0x44>)
 800049a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800049c:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <tim1_1hz_interrupt_init+0x44>)
 800049e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004a2:	6613      	str	r3, [r2, #96]	@ 0x60

	//Setting the prescaler register
	TIM1->PSC = 400-1;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <tim1_1hz_interrupt_init+0x48>)
 80004a6:	f240 128f 	movw	r2, #399	@ 0x18f
 80004aa:	629a      	str	r2, [r3, #40]	@ 0x28

	//Setting the auto-reload register
	TIM1->ARR = 10000-1;
 80004ac:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <tim1_1hz_interrupt_init+0x48>)
 80004ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004b2:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Reset the counter
	TIM1->CNT = 0;
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <tim1_1hz_interrupt_init+0x48>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable the timer
	TIM1->CR1 = CR1_CEN;
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <tim1_1hz_interrupt_init+0x48>)
 80004bc:	2201      	movs	r2, #1
 80004be:	601a      	str	r2, [r3, #0]

	//Enable timer update interrupt
	TIM1->DIER |= DIRE_UIE;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <tim1_1hz_interrupt_init+0x48>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <tim1_1hz_interrupt_init+0x48>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	60d3      	str	r3, [r2, #12]

	//Enable interrupt in NVIC
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80004cc:	2019      	movs	r0, #25
 80004ce:	f7ff ffc3 	bl	8000458 <__NVIC_EnableIRQ>

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40012c00 	.word	0x40012c00

080004e0 <__io_putchar>:
 * @param ch: character to send.
 *
 * @return the character that was sent.
 */
int __io_putchar(int ch)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f805 	bl	80004f8 <uart2_write>
	return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <uart2_write>:
 * @brief  The function writes data.
 *
 * @return None.
 */
void uart2_write(int ch)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	//Check transmit data register is empty
	while(!(USART2->ISR & ISR_TXE)) {}
 8000500:	bf00      	nop
 8000502:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <uart2_write+0x30>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <uart2_write+0xa>
	//Write to transmit data register
	USART2->TDR = (ch & 0xFF);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <uart2_write+0x30>)
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	b292      	uxth	r2, r2
 8000518:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40004400 	.word	0x40004400

0800052c <uart2_tx_init>:
 * @brief  The function initializes USART2 to transmit data.
 *
 * @return None.
 */
void uart2_tx_init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	//Enable clock access to PORT A
	RCC->AHB2ENR |= GPIOAEN;
 8000530:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <uart2_tx_init+0xc0>)
 8000532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000534:	4a2d      	ldr	r2, [pc, #180]	@ (80005ec <uart2_tx_init+0xc0>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Configure PA2 to alternate function
	GPIOA->MODER &= ~(1U<<4);
 800053c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000546:	f023 0310 	bic.w	r3, r3, #16
 800054a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800054c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6013      	str	r3, [r2, #0]

	//Configure PA3 to alternate function
	GPIOA->MODER &= ~(1U<<6);
 800055c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800056a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 800056c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800057a:	6013      	str	r3, [r2, #0]

	//Set alternate function type to UART_TX to PA2
	GPIOA->AFR[0] |= (1U<<8);
 800057c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000580:	6a1b      	ldr	r3, [r3, #32]
 8000582:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800058c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000590:	6a1b      	ldr	r3, [r3, #32]
 8000592:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800059a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800059c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80005ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005b0:	6a1b      	ldr	r3, [r3, #32]
 80005b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005ba:	6213      	str	r3, [r2, #32]

	//Enable clock access to USART2
	RCC->APB1ENR1 |= UART2EN;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <uart2_tx_init+0xc0>)
 80005be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c0:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <uart2_tx_init+0xc0>)
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c6:	6593      	str	r3, [r2, #88]	@ 0x58

	//Set the baud rate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <uart2_tx_init+0xc4>)
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <uart2_tx_init+0xc8>)
 80005d0:	f000 f812 	bl	80005f8 <uart_set_baudrate>

	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <uart2_tx_init+0xc8>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	601a      	str	r2, [r3, #0]

	//Enable USART module
	USART2->CR1 |= CR1_UE;
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <uart2_tx_init+0xc8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a05      	ldr	r2, [pc, #20]	@ (80005f4 <uart2_tx_init+0xc8>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	003d0900 	.word	0x003d0900
 80005f4:	40004400 	.word	0x40004400

080005f8 <uart_set_baudrate>:
 * @param  BaudRate: desired baud rate for UART communication.
 *
 * @return None.
 */
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	68b8      	ldr	r0, [r7, #8]
 8000608:	f000 f808 	bl	800061c <compute_uart_bd>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	60da      	str	r2, [r3, #12]
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <compute_uart_bd>:
 * @return baud rate divisor for setting up the UART peripheral.
 *
 * @return None.
 */
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	085a      	lsrs	r2, r3, #1
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	441a      	add	r2, r3
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	fbb2 f3f3 	udiv	r3, r2, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000648:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	@ (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	@ (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000672:	f000 fa6f 	bl	8000b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff fe03 	bl	8000280 <main>

0800067a <LoopForever>:

LoopForever:
  b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000688:	08001638 	.word	0x08001638
  ldr r2, =_sbss
 800068c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000690:	200001c8 	.word	0x200001c8

08000694 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_IRQHandler>
	...

08000698 <std>:
 8000698:	2300      	movs	r3, #0
 800069a:	b510      	push	{r4, lr}
 800069c:	4604      	mov	r4, r0
 800069e:	e9c0 3300 	strd	r3, r3, [r0]
 80006a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006a6:	6083      	str	r3, [r0, #8]
 80006a8:	8181      	strh	r1, [r0, #12]
 80006aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80006ac:	81c2      	strh	r2, [r0, #14]
 80006ae:	6183      	str	r3, [r0, #24]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2208      	movs	r2, #8
 80006b4:	305c      	adds	r0, #92	@ 0x5c
 80006b6:	f000 f9f9 	bl	8000aac <memset>
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <std+0x58>)
 80006bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <std+0x5c>)
 80006c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <std+0x60>)
 80006c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <std+0x64>)
 80006c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <std+0x68>)
 80006cc:	6224      	str	r4, [r4, #32]
 80006ce:	429c      	cmp	r4, r3
 80006d0:	d006      	beq.n	80006e0 <std+0x48>
 80006d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006d6:	4294      	cmp	r4, r2
 80006d8:	d002      	beq.n	80006e0 <std+0x48>
 80006da:	33d0      	adds	r3, #208	@ 0xd0
 80006dc:	429c      	cmp	r4, r3
 80006de:	d105      	bne.n	80006ec <std+0x54>
 80006e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e8:	f000 ba58 	b.w	8000b9c <__retarget_lock_init_recursive>
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	bf00      	nop
 80006f0:	080008fd 	.word	0x080008fd
 80006f4:	0800091f 	.word	0x0800091f
 80006f8:	08000957 	.word	0x08000957
 80006fc:	0800097b 	.word	0x0800097b
 8000700:	2000007c 	.word	0x2000007c

08000704 <stdio_exit_handler>:
 8000704:	4a02      	ldr	r2, [pc, #8]	@ (8000710 <stdio_exit_handler+0xc>)
 8000706:	4903      	ldr	r1, [pc, #12]	@ (8000714 <stdio_exit_handler+0x10>)
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <stdio_exit_handler+0x14>)
 800070a:	f000 b869 	b.w	80007e0 <_fwalk_sglue>
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000
 8000714:	0800143d 	.word	0x0800143d
 8000718:	20000010 	.word	0x20000010

0800071c <cleanup_stdio>:
 800071c:	6841      	ldr	r1, [r0, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <cleanup_stdio+0x34>)
 8000720:	4299      	cmp	r1, r3
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	d001      	beq.n	800072c <cleanup_stdio+0x10>
 8000728:	f000 fe88 	bl	800143c <_fflush_r>
 800072c:	68a1      	ldr	r1, [r4, #8]
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <cleanup_stdio+0x38>)
 8000730:	4299      	cmp	r1, r3
 8000732:	d002      	beq.n	800073a <cleanup_stdio+0x1e>
 8000734:	4620      	mov	r0, r4
 8000736:	f000 fe81 	bl	800143c <_fflush_r>
 800073a:	68e1      	ldr	r1, [r4, #12]
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <cleanup_stdio+0x3c>)
 800073e:	4299      	cmp	r1, r3
 8000740:	d004      	beq.n	800074c <cleanup_stdio+0x30>
 8000742:	4620      	mov	r0, r4
 8000744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000748:	f000 be78 	b.w	800143c <_fflush_r>
 800074c:	bd10      	pop	{r4, pc}
 800074e:	bf00      	nop
 8000750:	2000007c 	.word	0x2000007c
 8000754:	200000e4 	.word	0x200000e4
 8000758:	2000014c 	.word	0x2000014c

0800075c <global_stdio_init.part.0>:
 800075c:	b510      	push	{r4, lr}
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <global_stdio_init.part.0+0x30>)
 8000760:	4c0b      	ldr	r4, [pc, #44]	@ (8000790 <global_stdio_init.part.0+0x34>)
 8000762:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <global_stdio_init.part.0+0x38>)
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	4620      	mov	r0, r4
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	f7ff ff94 	bl	8000698 <std>
 8000770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000774:	2201      	movs	r2, #1
 8000776:	2109      	movs	r1, #9
 8000778:	f7ff ff8e 	bl	8000698 <std>
 800077c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000780:	2202      	movs	r2, #2
 8000782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000786:	2112      	movs	r1, #18
 8000788:	f7ff bf86 	b.w	8000698 <std>
 800078c:	200001b4 	.word	0x200001b4
 8000790:	2000007c 	.word	0x2000007c
 8000794:	08000705 	.word	0x08000705

08000798 <__sfp_lock_acquire>:
 8000798:	4801      	ldr	r0, [pc, #4]	@ (80007a0 <__sfp_lock_acquire+0x8>)
 800079a:	f000 ba00 	b.w	8000b9e <__retarget_lock_acquire_recursive>
 800079e:	bf00      	nop
 80007a0:	200001bd 	.word	0x200001bd

080007a4 <__sfp_lock_release>:
 80007a4:	4801      	ldr	r0, [pc, #4]	@ (80007ac <__sfp_lock_release+0x8>)
 80007a6:	f000 b9fb 	b.w	8000ba0 <__retarget_lock_release_recursive>
 80007aa:	bf00      	nop
 80007ac:	200001bd 	.word	0x200001bd

080007b0 <__sinit>:
 80007b0:	b510      	push	{r4, lr}
 80007b2:	4604      	mov	r4, r0
 80007b4:	f7ff fff0 	bl	8000798 <__sfp_lock_acquire>
 80007b8:	6a23      	ldr	r3, [r4, #32]
 80007ba:	b11b      	cbz	r3, 80007c4 <__sinit+0x14>
 80007bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c0:	f7ff bff0 	b.w	80007a4 <__sfp_lock_release>
 80007c4:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <__sinit+0x28>)
 80007c6:	6223      	str	r3, [r4, #32]
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <__sinit+0x2c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f5      	bne.n	80007bc <__sinit+0xc>
 80007d0:	f7ff ffc4 	bl	800075c <global_stdio_init.part.0>
 80007d4:	e7f2      	b.n	80007bc <__sinit+0xc>
 80007d6:	bf00      	nop
 80007d8:	0800071d 	.word	0x0800071d
 80007dc:	200001b4 	.word	0x200001b4

080007e0 <_fwalk_sglue>:
 80007e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e4:	4607      	mov	r7, r0
 80007e6:	4688      	mov	r8, r1
 80007e8:	4614      	mov	r4, r2
 80007ea:	2600      	movs	r6, #0
 80007ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007f0:	f1b9 0901 	subs.w	r9, r9, #1
 80007f4:	d505      	bpl.n	8000802 <_fwalk_sglue+0x22>
 80007f6:	6824      	ldr	r4, [r4, #0]
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1f7      	bne.n	80007ec <_fwalk_sglue+0xc>
 80007fc:	4630      	mov	r0, r6
 80007fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000802:	89ab      	ldrh	r3, [r5, #12]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d907      	bls.n	8000818 <_fwalk_sglue+0x38>
 8000808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	d003      	beq.n	8000818 <_fwalk_sglue+0x38>
 8000810:	4629      	mov	r1, r5
 8000812:	4638      	mov	r0, r7
 8000814:	47c0      	blx	r8
 8000816:	4306      	orrs	r6, r0
 8000818:	3568      	adds	r5, #104	@ 0x68
 800081a:	e7e9      	b.n	80007f0 <_fwalk_sglue+0x10>

0800081c <iprintf>:
 800081c:	b40f      	push	{r0, r1, r2, r3}
 800081e:	b507      	push	{r0, r1, r2, lr}
 8000820:	4906      	ldr	r1, [pc, #24]	@ (800083c <iprintf+0x20>)
 8000822:	ab04      	add	r3, sp, #16
 8000824:	6808      	ldr	r0, [r1, #0]
 8000826:	f853 2b04 	ldr.w	r2, [r3], #4
 800082a:	6881      	ldr	r1, [r0, #8]
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	f000 fadb 	bl	8000de8 <_vfiprintf_r>
 8000832:	b003      	add	sp, #12
 8000834:	f85d eb04 	ldr.w	lr, [sp], #4
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr
 800083c:	2000000c 	.word	0x2000000c

08000840 <_puts_r>:
 8000840:	6a03      	ldr	r3, [r0, #32]
 8000842:	b570      	push	{r4, r5, r6, lr}
 8000844:	6884      	ldr	r4, [r0, #8]
 8000846:	4605      	mov	r5, r0
 8000848:	460e      	mov	r6, r1
 800084a:	b90b      	cbnz	r3, 8000850 <_puts_r+0x10>
 800084c:	f7ff ffb0 	bl	80007b0 <__sinit>
 8000850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000852:	07db      	lsls	r3, r3, #31
 8000854:	d405      	bmi.n	8000862 <_puts_r+0x22>
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	0598      	lsls	r0, r3, #22
 800085a:	d402      	bmi.n	8000862 <_puts_r+0x22>
 800085c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800085e:	f000 f99e 	bl	8000b9e <__retarget_lock_acquire_recursive>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	0719      	lsls	r1, r3, #28
 8000866:	d502      	bpl.n	800086e <_puts_r+0x2e>
 8000868:	6923      	ldr	r3, [r4, #16]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d135      	bne.n	80008da <_puts_r+0x9a>
 800086e:	4621      	mov	r1, r4
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f8c5 	bl	8000a00 <__swsetup_r>
 8000876:	b380      	cbz	r0, 80008da <_puts_r+0x9a>
 8000878:	f04f 35ff 	mov.w	r5, #4294967295
 800087c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800087e:	07da      	lsls	r2, r3, #31
 8000880:	d405      	bmi.n	800088e <_puts_r+0x4e>
 8000882:	89a3      	ldrh	r3, [r4, #12]
 8000884:	059b      	lsls	r3, r3, #22
 8000886:	d402      	bmi.n	800088e <_puts_r+0x4e>
 8000888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800088a:	f000 f989 	bl	8000ba0 <__retarget_lock_release_recursive>
 800088e:	4628      	mov	r0, r5
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	2b00      	cmp	r3, #0
 8000894:	da04      	bge.n	80008a0 <_puts_r+0x60>
 8000896:	69a2      	ldr	r2, [r4, #24]
 8000898:	429a      	cmp	r2, r3
 800089a:	dc17      	bgt.n	80008cc <_puts_r+0x8c>
 800089c:	290a      	cmp	r1, #10
 800089e:	d015      	beq.n	80008cc <_puts_r+0x8c>
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	6022      	str	r2, [r4, #0]
 80008a6:	7019      	strb	r1, [r3, #0]
 80008a8:	68a3      	ldr	r3, [r4, #8]
 80008aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008ae:	3b01      	subs	r3, #1
 80008b0:	60a3      	str	r3, [r4, #8]
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d1ed      	bne.n	8000892 <_puts_r+0x52>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da11      	bge.n	80008de <_puts_r+0x9e>
 80008ba:	4622      	mov	r2, r4
 80008bc:	210a      	movs	r1, #10
 80008be:	4628      	mov	r0, r5
 80008c0:	f000 f85f 	bl	8000982 <__swbuf_r>
 80008c4:	3001      	adds	r0, #1
 80008c6:	d0d7      	beq.n	8000878 <_puts_r+0x38>
 80008c8:	250a      	movs	r5, #10
 80008ca:	e7d7      	b.n	800087c <_puts_r+0x3c>
 80008cc:	4622      	mov	r2, r4
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 f857 	bl	8000982 <__swbuf_r>
 80008d4:	3001      	adds	r0, #1
 80008d6:	d1e7      	bne.n	80008a8 <_puts_r+0x68>
 80008d8:	e7ce      	b.n	8000878 <_puts_r+0x38>
 80008da:	3e01      	subs	r6, #1
 80008dc:	e7e4      	b.n	80008a8 <_puts_r+0x68>
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	6022      	str	r2, [r4, #0]
 80008e4:	220a      	movs	r2, #10
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e7ee      	b.n	80008c8 <_puts_r+0x88>
	...

080008ec <puts>:
 80008ec:	4b02      	ldr	r3, [pc, #8]	@ (80008f8 <puts+0xc>)
 80008ee:	4601      	mov	r1, r0
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f7ff bfa5 	b.w	8000840 <_puts_r>
 80008f6:	bf00      	nop
 80008f8:	2000000c 	.word	0x2000000c

080008fc <__sread>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	460c      	mov	r4, r1
 8000900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000904:	f000 f8fc 	bl	8000b00 <_read_r>
 8000908:	2800      	cmp	r0, #0
 800090a:	bfab      	itete	ge
 800090c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800090e:	89a3      	ldrhlt	r3, [r4, #12]
 8000910:	181b      	addge	r3, r3, r0
 8000912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000916:	bfac      	ite	ge
 8000918:	6563      	strge	r3, [r4, #84]	@ 0x54
 800091a:	81a3      	strhlt	r3, [r4, #12]
 800091c:	bd10      	pop	{r4, pc}

0800091e <__swrite>:
 800091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000922:	461f      	mov	r7, r3
 8000924:	898b      	ldrh	r3, [r1, #12]
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	4605      	mov	r5, r0
 800092a:	460c      	mov	r4, r1
 800092c:	4616      	mov	r6, r2
 800092e:	d505      	bpl.n	800093c <__swrite+0x1e>
 8000930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000934:	2302      	movs	r3, #2
 8000936:	2200      	movs	r2, #0
 8000938:	f000 f8d0 	bl	8000adc <_lseek_r>
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000946:	81a3      	strh	r3, [r4, #12]
 8000948:	4632      	mov	r2, r6
 800094a:	463b      	mov	r3, r7
 800094c:	4628      	mov	r0, r5
 800094e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000952:	f000 b8e7 	b.w	8000b24 <_write_r>

08000956 <__sseek>:
 8000956:	b510      	push	{r4, lr}
 8000958:	460c      	mov	r4, r1
 800095a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095e:	f000 f8bd 	bl	8000adc <_lseek_r>
 8000962:	1c43      	adds	r3, r0, #1
 8000964:	89a3      	ldrh	r3, [r4, #12]
 8000966:	bf15      	itete	ne
 8000968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800096a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800096e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000972:	81a3      	strheq	r3, [r4, #12]
 8000974:	bf18      	it	ne
 8000976:	81a3      	strhne	r3, [r4, #12]
 8000978:	bd10      	pop	{r4, pc}

0800097a <__sclose>:
 800097a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800097e:	f000 b89d 	b.w	8000abc <_close_r>

08000982 <__swbuf_r>:
 8000982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000984:	460e      	mov	r6, r1
 8000986:	4614      	mov	r4, r2
 8000988:	4605      	mov	r5, r0
 800098a:	b118      	cbz	r0, 8000994 <__swbuf_r+0x12>
 800098c:	6a03      	ldr	r3, [r0, #32]
 800098e:	b90b      	cbnz	r3, 8000994 <__swbuf_r+0x12>
 8000990:	f7ff ff0e 	bl	80007b0 <__sinit>
 8000994:	69a3      	ldr	r3, [r4, #24]
 8000996:	60a3      	str	r3, [r4, #8]
 8000998:	89a3      	ldrh	r3, [r4, #12]
 800099a:	071a      	lsls	r2, r3, #28
 800099c:	d501      	bpl.n	80009a2 <__swbuf_r+0x20>
 800099e:	6923      	ldr	r3, [r4, #16]
 80009a0:	b943      	cbnz	r3, 80009b4 <__swbuf_r+0x32>
 80009a2:	4621      	mov	r1, r4
 80009a4:	4628      	mov	r0, r5
 80009a6:	f000 f82b 	bl	8000a00 <__swsetup_r>
 80009aa:	b118      	cbz	r0, 80009b4 <__swbuf_r+0x32>
 80009ac:	f04f 37ff 	mov.w	r7, #4294967295
 80009b0:	4638      	mov	r0, r7
 80009b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	6922      	ldr	r2, [r4, #16]
 80009b8:	1a98      	subs	r0, r3, r2
 80009ba:	6963      	ldr	r3, [r4, #20]
 80009bc:	b2f6      	uxtb	r6, r6
 80009be:	4283      	cmp	r3, r0
 80009c0:	4637      	mov	r7, r6
 80009c2:	dc05      	bgt.n	80009d0 <__swbuf_r+0x4e>
 80009c4:	4621      	mov	r1, r4
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fd38 	bl	800143c <_fflush_r>
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d1ed      	bne.n	80009ac <__swbuf_r+0x2a>
 80009d0:	68a3      	ldr	r3, [r4, #8]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	60a3      	str	r3, [r4, #8]
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	6022      	str	r2, [r4, #0]
 80009dc:	701e      	strb	r6, [r3, #0]
 80009de:	6962      	ldr	r2, [r4, #20]
 80009e0:	1c43      	adds	r3, r0, #1
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d004      	beq.n	80009f0 <__swbuf_r+0x6e>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	07db      	lsls	r3, r3, #31
 80009ea:	d5e1      	bpl.n	80009b0 <__swbuf_r+0x2e>
 80009ec:	2e0a      	cmp	r6, #10
 80009ee:	d1df      	bne.n	80009b0 <__swbuf_r+0x2e>
 80009f0:	4621      	mov	r1, r4
 80009f2:	4628      	mov	r0, r5
 80009f4:	f000 fd22 	bl	800143c <_fflush_r>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d0d9      	beq.n	80009b0 <__swbuf_r+0x2e>
 80009fc:	e7d6      	b.n	80009ac <__swbuf_r+0x2a>
	...

08000a00 <__swsetup_r>:
 8000a00:	b538      	push	{r3, r4, r5, lr}
 8000a02:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <__swsetup_r+0xa8>)
 8000a04:	4605      	mov	r5, r0
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	460c      	mov	r4, r1
 8000a0a:	b118      	cbz	r0, 8000a14 <__swsetup_r+0x14>
 8000a0c:	6a03      	ldr	r3, [r0, #32]
 8000a0e:	b90b      	cbnz	r3, 8000a14 <__swsetup_r+0x14>
 8000a10:	f7ff fece 	bl	80007b0 <__sinit>
 8000a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a18:	0719      	lsls	r1, r3, #28
 8000a1a:	d422      	bmi.n	8000a62 <__swsetup_r+0x62>
 8000a1c:	06da      	lsls	r2, r3, #27
 8000a1e:	d407      	bmi.n	8000a30 <__swsetup_r+0x30>
 8000a20:	2209      	movs	r2, #9
 8000a22:	602a      	str	r2, [r5, #0]
 8000a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a28:	81a3      	strh	r3, [r4, #12]
 8000a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2e:	e033      	b.n	8000a98 <__swsetup_r+0x98>
 8000a30:	0758      	lsls	r0, r3, #29
 8000a32:	d512      	bpl.n	8000a5a <__swsetup_r+0x5a>
 8000a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a36:	b141      	cbz	r1, 8000a4a <__swsetup_r+0x4a>
 8000a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d002      	beq.n	8000a46 <__swsetup_r+0x46>
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 f8af 	bl	8000ba4 <_free_r>
 8000a46:	2300      	movs	r3, #0
 8000a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a4a:	89a3      	ldrh	r3, [r4, #12]
 8000a4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a50:	81a3      	strh	r3, [r4, #12]
 8000a52:	2300      	movs	r3, #0
 8000a54:	6063      	str	r3, [r4, #4]
 8000a56:	6923      	ldr	r3, [r4, #16]
 8000a58:	6023      	str	r3, [r4, #0]
 8000a5a:	89a3      	ldrh	r3, [r4, #12]
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	81a3      	strh	r3, [r4, #12]
 8000a62:	6923      	ldr	r3, [r4, #16]
 8000a64:	b94b      	cbnz	r3, 8000a7a <__swsetup_r+0x7a>
 8000a66:	89a3      	ldrh	r3, [r4, #12]
 8000a68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a70:	d003      	beq.n	8000a7a <__swsetup_r+0x7a>
 8000a72:	4621      	mov	r1, r4
 8000a74:	4628      	mov	r0, r5
 8000a76:	f000 fd2f 	bl	80014d8 <__smakebuf_r>
 8000a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a7e:	f013 0201 	ands.w	r2, r3, #1
 8000a82:	d00a      	beq.n	8000a9a <__swsetup_r+0x9a>
 8000a84:	2200      	movs	r2, #0
 8000a86:	60a2      	str	r2, [r4, #8]
 8000a88:	6962      	ldr	r2, [r4, #20]
 8000a8a:	4252      	negs	r2, r2
 8000a8c:	61a2      	str	r2, [r4, #24]
 8000a8e:	6922      	ldr	r2, [r4, #16]
 8000a90:	b942      	cbnz	r2, 8000aa4 <__swsetup_r+0xa4>
 8000a92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a96:	d1c5      	bne.n	8000a24 <__swsetup_r+0x24>
 8000a98:	bd38      	pop	{r3, r4, r5, pc}
 8000a9a:	0799      	lsls	r1, r3, #30
 8000a9c:	bf58      	it	pl
 8000a9e:	6962      	ldrpl	r2, [r4, #20]
 8000aa0:	60a2      	str	r2, [r4, #8]
 8000aa2:	e7f4      	b.n	8000a8e <__swsetup_r+0x8e>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e7f7      	b.n	8000a98 <__swsetup_r+0x98>
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <memset>:
 8000aac:	4402      	add	r2, r0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <memset+0xa>
 8000ab4:	4770      	bx	lr
 8000ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8000aba:	e7f9      	b.n	8000ab0 <memset+0x4>

08000abc <_close_r>:
 8000abc:	b538      	push	{r3, r4, r5, lr}
 8000abe:	4d06      	ldr	r5, [pc, #24]	@ (8000ad8 <_close_r+0x1c>)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	602b      	str	r3, [r5, #0]
 8000ac8:	f7ff fc5b 	bl	8000382 <_close>
 8000acc:	1c43      	adds	r3, r0, #1
 8000ace:	d102      	bne.n	8000ad6 <_close_r+0x1a>
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	b103      	cbz	r3, 8000ad6 <_close_r+0x1a>
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}
 8000ad8:	200001b8 	.word	0x200001b8

08000adc <_lseek_r>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4d07      	ldr	r5, [pc, #28]	@ (8000afc <_lseek_r+0x20>)
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	602a      	str	r2, [r5, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f7ff fc70 	bl	80003d0 <_lseek>
 8000af0:	1c43      	adds	r3, r0, #1
 8000af2:	d102      	bne.n	8000afa <_lseek_r+0x1e>
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	b103      	cbz	r3, 8000afa <_lseek_r+0x1e>
 8000af8:	6023      	str	r3, [r4, #0]
 8000afa:	bd38      	pop	{r3, r4, r5, pc}
 8000afc:	200001b8 	.word	0x200001b8

08000b00 <_read_r>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	4d07      	ldr	r5, [pc, #28]	@ (8000b20 <_read_r+0x20>)
 8000b04:	4604      	mov	r4, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4611      	mov	r1, r2
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	602a      	str	r2, [r5, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f7ff fbfe 	bl	8000310 <_read>
 8000b14:	1c43      	adds	r3, r0, #1
 8000b16:	d102      	bne.n	8000b1e <_read_r+0x1e>
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	b103      	cbz	r3, 8000b1e <_read_r+0x1e>
 8000b1c:	6023      	str	r3, [r4, #0]
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
 8000b20:	200001b8 	.word	0x200001b8

08000b24 <_write_r>:
 8000b24:	b538      	push	{r3, r4, r5, lr}
 8000b26:	4d07      	ldr	r5, [pc, #28]	@ (8000b44 <_write_r+0x20>)
 8000b28:	4604      	mov	r4, r0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	2200      	movs	r2, #0
 8000b30:	602a      	str	r2, [r5, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	f7ff fc09 	bl	800034a <_write>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d102      	bne.n	8000b42 <_write_r+0x1e>
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	b103      	cbz	r3, 8000b42 <_write_r+0x1e>
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	bd38      	pop	{r3, r4, r5, pc}
 8000b44:	200001b8 	.word	0x200001b8

08000b48 <__errno>:
 8000b48:	4b01      	ldr	r3, [pc, #4]	@ (8000b50 <__errno+0x8>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000000c 	.word	0x2000000c

08000b54 <__libc_init_array>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	4d0d      	ldr	r5, [pc, #52]	@ (8000b8c <__libc_init_array+0x38>)
 8000b58:	4c0d      	ldr	r4, [pc, #52]	@ (8000b90 <__libc_init_array+0x3c>)
 8000b5a:	1b64      	subs	r4, r4, r5
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	2600      	movs	r6, #0
 8000b60:	42a6      	cmp	r6, r4
 8000b62:	d109      	bne.n	8000b78 <__libc_init_array+0x24>
 8000b64:	4d0b      	ldr	r5, [pc, #44]	@ (8000b94 <__libc_init_array+0x40>)
 8000b66:	4c0c      	ldr	r4, [pc, #48]	@ (8000b98 <__libc_init_array+0x44>)
 8000b68:	f000 fd24 	bl	80015b4 <_init>
 8000b6c:	1b64      	subs	r4, r4, r5
 8000b6e:	10a4      	asrs	r4, r4, #2
 8000b70:	2600      	movs	r6, #0
 8000b72:	42a6      	cmp	r6, r4
 8000b74:	d105      	bne.n	8000b82 <__libc_init_array+0x2e>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7c:	4798      	blx	r3
 8000b7e:	3601      	adds	r6, #1
 8000b80:	e7ee      	b.n	8000b60 <__libc_init_array+0xc>
 8000b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b86:	4798      	blx	r3
 8000b88:	3601      	adds	r6, #1
 8000b8a:	e7f2      	b.n	8000b72 <__libc_init_array+0x1e>
 8000b8c:	08001630 	.word	0x08001630
 8000b90:	08001630 	.word	0x08001630
 8000b94:	08001630 	.word	0x08001630
 8000b98:	08001634 	.word	0x08001634

08000b9c <__retarget_lock_init_recursive>:
 8000b9c:	4770      	bx	lr

08000b9e <__retarget_lock_acquire_recursive>:
 8000b9e:	4770      	bx	lr

08000ba0 <__retarget_lock_release_recursive>:
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_free_r>:
 8000ba4:	b538      	push	{r3, r4, r5, lr}
 8000ba6:	4605      	mov	r5, r0
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d041      	beq.n	8000c30 <_free_r+0x8c>
 8000bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bb0:	1f0c      	subs	r4, r1, #4
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bfb8      	it	lt
 8000bb6:	18e4      	addlt	r4, r4, r3
 8000bb8:	f000 f8e0 	bl	8000d7c <__malloc_lock>
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <_free_r+0x90>)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	b933      	cbnz	r3, 8000bd0 <_free_r+0x2c>
 8000bc2:	6063      	str	r3, [r4, #4]
 8000bc4:	6014      	str	r4, [r2, #0]
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bcc:	f000 b8dc 	b.w	8000d88 <__malloc_unlock>
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	d908      	bls.n	8000be6 <_free_r+0x42>
 8000bd4:	6820      	ldr	r0, [r4, #0]
 8000bd6:	1821      	adds	r1, r4, r0
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	bf01      	itttt	eq
 8000bdc:	6819      	ldreq	r1, [r3, #0]
 8000bde:	685b      	ldreq	r3, [r3, #4]
 8000be0:	1809      	addeq	r1, r1, r0
 8000be2:	6021      	streq	r1, [r4, #0]
 8000be4:	e7ed      	b.n	8000bc2 <_free_r+0x1e>
 8000be6:	461a      	mov	r2, r3
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b10b      	cbz	r3, 8000bf0 <_free_r+0x4c>
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d9fa      	bls.n	8000be6 <_free_r+0x42>
 8000bf0:	6811      	ldr	r1, [r2, #0]
 8000bf2:	1850      	adds	r0, r2, r1
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d10b      	bne.n	8000c10 <_free_r+0x6c>
 8000bf8:	6820      	ldr	r0, [r4, #0]
 8000bfa:	4401      	add	r1, r0
 8000bfc:	1850      	adds	r0, r2, r1
 8000bfe:	4283      	cmp	r3, r0
 8000c00:	6011      	str	r1, [r2, #0]
 8000c02:	d1e0      	bne.n	8000bc6 <_free_r+0x22>
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	6053      	str	r3, [r2, #4]
 8000c0a:	4408      	add	r0, r1
 8000c0c:	6010      	str	r0, [r2, #0]
 8000c0e:	e7da      	b.n	8000bc6 <_free_r+0x22>
 8000c10:	d902      	bls.n	8000c18 <_free_r+0x74>
 8000c12:	230c      	movs	r3, #12
 8000c14:	602b      	str	r3, [r5, #0]
 8000c16:	e7d6      	b.n	8000bc6 <_free_r+0x22>
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	1821      	adds	r1, r4, r0
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	bf04      	itt	eq
 8000c20:	6819      	ldreq	r1, [r3, #0]
 8000c22:	685b      	ldreq	r3, [r3, #4]
 8000c24:	6063      	str	r3, [r4, #4]
 8000c26:	bf04      	itt	eq
 8000c28:	1809      	addeq	r1, r1, r0
 8000c2a:	6021      	streq	r1, [r4, #0]
 8000c2c:	6054      	str	r4, [r2, #4]
 8000c2e:	e7ca      	b.n	8000bc6 <_free_r+0x22>
 8000c30:	bd38      	pop	{r3, r4, r5, pc}
 8000c32:	bf00      	nop
 8000c34:	200001c4 	.word	0x200001c4

08000c38 <sbrk_aligned>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8000c78 <sbrk_aligned+0x40>)
 8000c3c:	460c      	mov	r4, r1
 8000c3e:	6831      	ldr	r1, [r6, #0]
 8000c40:	4605      	mov	r5, r0
 8000c42:	b911      	cbnz	r1, 8000c4a <sbrk_aligned+0x12>
 8000c44:	f000 fca6 	bl	8001594 <_sbrk_r>
 8000c48:	6030      	str	r0, [r6, #0]
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f000 fca1 	bl	8001594 <_sbrk_r>
 8000c52:	1c43      	adds	r3, r0, #1
 8000c54:	d103      	bne.n	8000c5e <sbrk_aligned+0x26>
 8000c56:	f04f 34ff 	mov.w	r4, #4294967295
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
 8000c5e:	1cc4      	adds	r4, r0, #3
 8000c60:	f024 0403 	bic.w	r4, r4, #3
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	d0f8      	beq.n	8000c5a <sbrk_aligned+0x22>
 8000c68:	1a21      	subs	r1, r4, r0
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f000 fc92 	bl	8001594 <_sbrk_r>
 8000c70:	3001      	adds	r0, #1
 8000c72:	d1f2      	bne.n	8000c5a <sbrk_aligned+0x22>
 8000c74:	e7ef      	b.n	8000c56 <sbrk_aligned+0x1e>
 8000c76:	bf00      	nop
 8000c78:	200001c0 	.word	0x200001c0

08000c7c <_malloc_r>:
 8000c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c80:	1ccd      	adds	r5, r1, #3
 8000c82:	f025 0503 	bic.w	r5, r5, #3
 8000c86:	3508      	adds	r5, #8
 8000c88:	2d0c      	cmp	r5, #12
 8000c8a:	bf38      	it	cc
 8000c8c:	250c      	movcc	r5, #12
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	4606      	mov	r6, r0
 8000c92:	db01      	blt.n	8000c98 <_malloc_r+0x1c>
 8000c94:	42a9      	cmp	r1, r5
 8000c96:	d904      	bls.n	8000ca2 <_malloc_r+0x26>
 8000c98:	230c      	movs	r3, #12
 8000c9a:	6033      	str	r3, [r6, #0]
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d78 <_malloc_r+0xfc>
 8000ca6:	f000 f869 	bl	8000d7c <__malloc_lock>
 8000caa:	f8d8 3000 	ldr.w	r3, [r8]
 8000cae:	461c      	mov	r4, r3
 8000cb0:	bb44      	cbnz	r4, 8000d04 <_malloc_r+0x88>
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f7ff ffbf 	bl	8000c38 <sbrk_aligned>
 8000cba:	1c43      	adds	r3, r0, #1
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	d158      	bne.n	8000d72 <_malloc_r+0xf6>
 8000cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8000cc4:	4627      	mov	r7, r4
 8000cc6:	2f00      	cmp	r7, #0
 8000cc8:	d143      	bne.n	8000d52 <_malloc_r+0xd6>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d04b      	beq.n	8000d66 <_malloc_r+0xea>
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	eb04 0903 	add.w	r9, r4, r3
 8000cd8:	f000 fc5c 	bl	8001594 <_sbrk_r>
 8000cdc:	4581      	cmp	r9, r0
 8000cde:	d142      	bne.n	8000d66 <_malloc_r+0xea>
 8000ce0:	6821      	ldr	r1, [r4, #0]
 8000ce2:	1a6d      	subs	r5, r5, r1
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	f7ff ffa6 	bl	8000c38 <sbrk_aligned>
 8000cec:	3001      	adds	r0, #1
 8000cee:	d03a      	beq.n	8000d66 <_malloc_r+0xea>
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	442b      	add	r3, r5
 8000cf4:	6023      	str	r3, [r4, #0]
 8000cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	bb62      	cbnz	r2, 8000d58 <_malloc_r+0xdc>
 8000cfe:	f8c8 7000 	str.w	r7, [r8]
 8000d02:	e00f      	b.n	8000d24 <_malloc_r+0xa8>
 8000d04:	6822      	ldr	r2, [r4, #0]
 8000d06:	1b52      	subs	r2, r2, r5
 8000d08:	d420      	bmi.n	8000d4c <_malloc_r+0xd0>
 8000d0a:	2a0b      	cmp	r2, #11
 8000d0c:	d917      	bls.n	8000d3e <_malloc_r+0xc2>
 8000d0e:	1961      	adds	r1, r4, r5
 8000d10:	42a3      	cmp	r3, r4
 8000d12:	6025      	str	r5, [r4, #0]
 8000d14:	bf18      	it	ne
 8000d16:	6059      	strne	r1, [r3, #4]
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	bf08      	it	eq
 8000d1c:	f8c8 1000 	streq.w	r1, [r8]
 8000d20:	5162      	str	r2, [r4, r5]
 8000d22:	604b      	str	r3, [r1, #4]
 8000d24:	4630      	mov	r0, r6
 8000d26:	f000 f82f 	bl	8000d88 <__malloc_unlock>
 8000d2a:	f104 000b 	add.w	r0, r4, #11
 8000d2e:	1d23      	adds	r3, r4, #4
 8000d30:	f020 0007 	bic.w	r0, r0, #7
 8000d34:	1ac2      	subs	r2, r0, r3
 8000d36:	bf1c      	itt	ne
 8000d38:	1a1b      	subne	r3, r3, r0
 8000d3a:	50a3      	strne	r3, [r4, r2]
 8000d3c:	e7af      	b.n	8000c9e <_malloc_r+0x22>
 8000d3e:	6862      	ldr	r2, [r4, #4]
 8000d40:	42a3      	cmp	r3, r4
 8000d42:	bf0c      	ite	eq
 8000d44:	f8c8 2000 	streq.w	r2, [r8]
 8000d48:	605a      	strne	r2, [r3, #4]
 8000d4a:	e7eb      	b.n	8000d24 <_malloc_r+0xa8>
 8000d4c:	4623      	mov	r3, r4
 8000d4e:	6864      	ldr	r4, [r4, #4]
 8000d50:	e7ae      	b.n	8000cb0 <_malloc_r+0x34>
 8000d52:	463c      	mov	r4, r7
 8000d54:	687f      	ldr	r7, [r7, #4]
 8000d56:	e7b6      	b.n	8000cc6 <_malloc_r+0x4a>
 8000d58:	461a      	mov	r2, r3
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d1fb      	bne.n	8000d58 <_malloc_r+0xdc>
 8000d60:	2300      	movs	r3, #0
 8000d62:	6053      	str	r3, [r2, #4]
 8000d64:	e7de      	b.n	8000d24 <_malloc_r+0xa8>
 8000d66:	230c      	movs	r3, #12
 8000d68:	6033      	str	r3, [r6, #0]
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f000 f80c 	bl	8000d88 <__malloc_unlock>
 8000d70:	e794      	b.n	8000c9c <_malloc_r+0x20>
 8000d72:	6005      	str	r5, [r0, #0]
 8000d74:	e7d6      	b.n	8000d24 <_malloc_r+0xa8>
 8000d76:	bf00      	nop
 8000d78:	200001c4 	.word	0x200001c4

08000d7c <__malloc_lock>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	@ (8000d84 <__malloc_lock+0x8>)
 8000d7e:	f7ff bf0e 	b.w	8000b9e <__retarget_lock_acquire_recursive>
 8000d82:	bf00      	nop
 8000d84:	200001bc 	.word	0x200001bc

08000d88 <__malloc_unlock>:
 8000d88:	4801      	ldr	r0, [pc, #4]	@ (8000d90 <__malloc_unlock+0x8>)
 8000d8a:	f7ff bf09 	b.w	8000ba0 <__retarget_lock_release_recursive>
 8000d8e:	bf00      	nop
 8000d90:	200001bc 	.word	0x200001bc

08000d94 <__sfputc_r>:
 8000d94:	6893      	ldr	r3, [r2, #8]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	b410      	push	{r4}
 8000d9c:	6093      	str	r3, [r2, #8]
 8000d9e:	da08      	bge.n	8000db2 <__sfputc_r+0x1e>
 8000da0:	6994      	ldr	r4, [r2, #24]
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	db01      	blt.n	8000daa <__sfputc_r+0x16>
 8000da6:	290a      	cmp	r1, #10
 8000da8:	d103      	bne.n	8000db2 <__sfputc_r+0x1e>
 8000daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dae:	f7ff bde8 	b.w	8000982 <__swbuf_r>
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	1c58      	adds	r0, r3, #1
 8000db6:	6010      	str	r0, [r2, #0]
 8000db8:	7019      	strb	r1, [r3, #0]
 8000dba:	4608      	mov	r0, r1
 8000dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <__sfputs_r>:
 8000dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	4614      	mov	r4, r2
 8000dca:	18d5      	adds	r5, r2, r3
 8000dcc:	42ac      	cmp	r4, r5
 8000dce:	d101      	bne.n	8000dd4 <__sfputs_r+0x12>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e007      	b.n	8000de4 <__sfputs_r+0x22>
 8000dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dd8:	463a      	mov	r2, r7
 8000dda:	4630      	mov	r0, r6
 8000ddc:	f7ff ffda 	bl	8000d94 <__sfputc_r>
 8000de0:	1c43      	adds	r3, r0, #1
 8000de2:	d1f3      	bne.n	8000dcc <__sfputs_r+0xa>
 8000de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000de8 <_vfiprintf_r>:
 8000de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dec:	460d      	mov	r5, r1
 8000dee:	b09d      	sub	sp, #116	@ 0x74
 8000df0:	4614      	mov	r4, r2
 8000df2:	4698      	mov	r8, r3
 8000df4:	4606      	mov	r6, r0
 8000df6:	b118      	cbz	r0, 8000e00 <_vfiprintf_r+0x18>
 8000df8:	6a03      	ldr	r3, [r0, #32]
 8000dfa:	b90b      	cbnz	r3, 8000e00 <_vfiprintf_r+0x18>
 8000dfc:	f7ff fcd8 	bl	80007b0 <__sinit>
 8000e00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e02:	07d9      	lsls	r1, r3, #31
 8000e04:	d405      	bmi.n	8000e12 <_vfiprintf_r+0x2a>
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	059a      	lsls	r2, r3, #22
 8000e0a:	d402      	bmi.n	8000e12 <_vfiprintf_r+0x2a>
 8000e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e0e:	f7ff fec6 	bl	8000b9e <__retarget_lock_acquire_recursive>
 8000e12:	89ab      	ldrh	r3, [r5, #12]
 8000e14:	071b      	lsls	r3, r3, #28
 8000e16:	d501      	bpl.n	8000e1c <_vfiprintf_r+0x34>
 8000e18:	692b      	ldr	r3, [r5, #16]
 8000e1a:	b99b      	cbnz	r3, 8000e44 <_vfiprintf_r+0x5c>
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff fdee 	bl	8000a00 <__swsetup_r>
 8000e24:	b170      	cbz	r0, 8000e44 <_vfiprintf_r+0x5c>
 8000e26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e28:	07dc      	lsls	r4, r3, #31
 8000e2a:	d504      	bpl.n	8000e36 <_vfiprintf_r+0x4e>
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	b01d      	add	sp, #116	@ 0x74
 8000e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e36:	89ab      	ldrh	r3, [r5, #12]
 8000e38:	0598      	lsls	r0, r3, #22
 8000e3a:	d4f7      	bmi.n	8000e2c <_vfiprintf_r+0x44>
 8000e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e3e:	f7ff feaf 	bl	8000ba0 <__retarget_lock_release_recursive>
 8000e42:	e7f3      	b.n	8000e2c <_vfiprintf_r+0x44>
 8000e44:	2300      	movs	r3, #0
 8000e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e48:	2320      	movs	r3, #32
 8000e4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e52:	2330      	movs	r3, #48	@ 0x30
 8000e54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001004 <_vfiprintf_r+0x21c>
 8000e58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e5c:	f04f 0901 	mov.w	r9, #1
 8000e60:	4623      	mov	r3, r4
 8000e62:	469a      	mov	sl, r3
 8000e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e68:	b10a      	cbz	r2, 8000e6e <_vfiprintf_r+0x86>
 8000e6a:	2a25      	cmp	r2, #37	@ 0x25
 8000e6c:	d1f9      	bne.n	8000e62 <_vfiprintf_r+0x7a>
 8000e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8000e72:	d00b      	beq.n	8000e8c <_vfiprintf_r+0xa4>
 8000e74:	465b      	mov	r3, fp
 8000e76:	4622      	mov	r2, r4
 8000e78:	4629      	mov	r1, r5
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	f7ff ffa1 	bl	8000dc2 <__sfputs_r>
 8000e80:	3001      	adds	r0, #1
 8000e82:	f000 80a7 	beq.w	8000fd4 <_vfiprintf_r+0x1ec>
 8000e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e88:	445a      	add	r2, fp
 8000e8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 809f 	beq.w	8000fd4 <_vfiprintf_r+0x1ec>
 8000e96:	2300      	movs	r3, #0
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ea0:	f10a 0a01 	add.w	sl, sl, #1
 8000ea4:	9304      	str	r3, [sp, #16]
 8000ea6:	9307      	str	r3, [sp, #28]
 8000ea8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000eac:	931a      	str	r3, [sp, #104]	@ 0x68
 8000eae:	4654      	mov	r4, sl
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb6:	4853      	ldr	r0, [pc, #332]	@ (8001004 <_vfiprintf_r+0x21c>)
 8000eb8:	f7ff f992 	bl	80001e0 <memchr>
 8000ebc:	9a04      	ldr	r2, [sp, #16]
 8000ebe:	b9d8      	cbnz	r0, 8000ef8 <_vfiprintf_r+0x110>
 8000ec0:	06d1      	lsls	r1, r2, #27
 8000ec2:	bf44      	itt	mi
 8000ec4:	2320      	movmi	r3, #32
 8000ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000eca:	0713      	lsls	r3, r2, #28
 8000ecc:	bf44      	itt	mi
 8000ece:	232b      	movmi	r3, #43	@ 0x2b
 8000ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eda:	d015      	beq.n	8000f08 <_vfiprintf_r+0x120>
 8000edc:	9a07      	ldr	r2, [sp, #28]
 8000ede:	4654      	mov	r4, sl
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f04f 0c0a 	mov.w	ip, #10
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000eec:	3b30      	subs	r3, #48	@ 0x30
 8000eee:	2b09      	cmp	r3, #9
 8000ef0:	d94b      	bls.n	8000f8a <_vfiprintf_r+0x1a2>
 8000ef2:	b1b0      	cbz	r0, 8000f22 <_vfiprintf_r+0x13a>
 8000ef4:	9207      	str	r2, [sp, #28]
 8000ef6:	e014      	b.n	8000f22 <_vfiprintf_r+0x13a>
 8000ef8:	eba0 0308 	sub.w	r3, r0, r8
 8000efc:	fa09 f303 	lsl.w	r3, r9, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	46a2      	mov	sl, r4
 8000f06:	e7d2      	b.n	8000eae <_vfiprintf_r+0xc6>
 8000f08:	9b03      	ldr	r3, [sp, #12]
 8000f0a:	1d19      	adds	r1, r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	9103      	str	r1, [sp, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bfbb      	ittet	lt
 8000f14:	425b      	neglt	r3, r3
 8000f16:	f042 0202 	orrlt.w	r2, r2, #2
 8000f1a:	9307      	strge	r3, [sp, #28]
 8000f1c:	9307      	strlt	r3, [sp, #28]
 8000f1e:	bfb8      	it	lt
 8000f20:	9204      	strlt	r2, [sp, #16]
 8000f22:	7823      	ldrb	r3, [r4, #0]
 8000f24:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f26:	d10a      	bne.n	8000f3e <_vfiprintf_r+0x156>
 8000f28:	7863      	ldrb	r3, [r4, #1]
 8000f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f2c:	d132      	bne.n	8000f94 <_vfiprintf_r+0x1ac>
 8000f2e:	9b03      	ldr	r3, [sp, #12]
 8000f30:	1d1a      	adds	r2, r3, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	9203      	str	r2, [sp, #12]
 8000f36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f3a:	3402      	adds	r4, #2
 8000f3c:	9305      	str	r3, [sp, #20]
 8000f3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001014 <_vfiprintf_r+0x22c>
 8000f42:	7821      	ldrb	r1, [r4, #0]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4650      	mov	r0, sl
 8000f48:	f7ff f94a 	bl	80001e0 <memchr>
 8000f4c:	b138      	cbz	r0, 8000f5e <_vfiprintf_r+0x176>
 8000f4e:	9b04      	ldr	r3, [sp, #16]
 8000f50:	eba0 000a 	sub.w	r0, r0, sl
 8000f54:	2240      	movs	r2, #64	@ 0x40
 8000f56:	4082      	lsls	r2, r0
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	3401      	adds	r4, #1
 8000f5c:	9304      	str	r3, [sp, #16]
 8000f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f62:	4829      	ldr	r0, [pc, #164]	@ (8001008 <_vfiprintf_r+0x220>)
 8000f64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f68:	2206      	movs	r2, #6
 8000f6a:	f7ff f939 	bl	80001e0 <memchr>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d03f      	beq.n	8000ff2 <_vfiprintf_r+0x20a>
 8000f72:	4b26      	ldr	r3, [pc, #152]	@ (800100c <_vfiprintf_r+0x224>)
 8000f74:	bb1b      	cbnz	r3, 8000fbe <_vfiprintf_r+0x1d6>
 8000f76:	9b03      	ldr	r3, [sp, #12]
 8000f78:	3307      	adds	r3, #7
 8000f7a:	f023 0307 	bic.w	r3, r3, #7
 8000f7e:	3308      	adds	r3, #8
 8000f80:	9303      	str	r3, [sp, #12]
 8000f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f84:	443b      	add	r3, r7
 8000f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f88:	e76a      	b.n	8000e60 <_vfiprintf_r+0x78>
 8000f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f8e:	460c      	mov	r4, r1
 8000f90:	2001      	movs	r0, #1
 8000f92:	e7a8      	b.n	8000ee6 <_vfiprintf_r+0xfe>
 8000f94:	2300      	movs	r3, #0
 8000f96:	3401      	adds	r4, #1
 8000f98:	9305      	str	r3, [sp, #20]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 0c0a 	mov.w	ip, #10
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fa6:	3a30      	subs	r2, #48	@ 0x30
 8000fa8:	2a09      	cmp	r2, #9
 8000faa:	d903      	bls.n	8000fb4 <_vfiprintf_r+0x1cc>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0c6      	beq.n	8000f3e <_vfiprintf_r+0x156>
 8000fb0:	9105      	str	r1, [sp, #20]
 8000fb2:	e7c4      	b.n	8000f3e <_vfiprintf_r+0x156>
 8000fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fb8:	4604      	mov	r4, r0
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e7f0      	b.n	8000fa0 <_vfiprintf_r+0x1b8>
 8000fbe:	ab03      	add	r3, sp, #12
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	462a      	mov	r2, r5
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <_vfiprintf_r+0x228>)
 8000fc6:	a904      	add	r1, sp, #16
 8000fc8:	4630      	mov	r0, r6
 8000fca:	f3af 8000 	nop.w
 8000fce:	4607      	mov	r7, r0
 8000fd0:	1c78      	adds	r0, r7, #1
 8000fd2:	d1d6      	bne.n	8000f82 <_vfiprintf_r+0x19a>
 8000fd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fd6:	07d9      	lsls	r1, r3, #31
 8000fd8:	d405      	bmi.n	8000fe6 <_vfiprintf_r+0x1fe>
 8000fda:	89ab      	ldrh	r3, [r5, #12]
 8000fdc:	059a      	lsls	r2, r3, #22
 8000fde:	d402      	bmi.n	8000fe6 <_vfiprintf_r+0x1fe>
 8000fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fe2:	f7ff fddd 	bl	8000ba0 <__retarget_lock_release_recursive>
 8000fe6:	89ab      	ldrh	r3, [r5, #12]
 8000fe8:	065b      	lsls	r3, r3, #25
 8000fea:	f53f af1f 	bmi.w	8000e2c <_vfiprintf_r+0x44>
 8000fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ff0:	e71e      	b.n	8000e30 <_vfiprintf_r+0x48>
 8000ff2:	ab03      	add	r3, sp, #12
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	462a      	mov	r2, r5
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <_vfiprintf_r+0x228>)
 8000ffa:	a904      	add	r1, sp, #16
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f000 f879 	bl	80010f4 <_printf_i>
 8001002:	e7e4      	b.n	8000fce <_vfiprintf_r+0x1e6>
 8001004:	080015f3 	.word	0x080015f3
 8001008:	080015fd 	.word	0x080015fd
 800100c:	00000000 	.word	0x00000000
 8001010:	08000dc3 	.word	0x08000dc3
 8001014:	080015f9 	.word	0x080015f9

08001018 <_printf_common>:
 8001018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800101c:	4616      	mov	r6, r2
 800101e:	4698      	mov	r8, r3
 8001020:	688a      	ldr	r2, [r1, #8]
 8001022:	690b      	ldr	r3, [r1, #16]
 8001024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001028:	4293      	cmp	r3, r2
 800102a:	bfb8      	it	lt
 800102c:	4613      	movlt	r3, r2
 800102e:	6033      	str	r3, [r6, #0]
 8001030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001034:	4607      	mov	r7, r0
 8001036:	460c      	mov	r4, r1
 8001038:	b10a      	cbz	r2, 800103e <_printf_common+0x26>
 800103a:	3301      	adds	r3, #1
 800103c:	6033      	str	r3, [r6, #0]
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	0699      	lsls	r1, r3, #26
 8001042:	bf42      	ittt	mi
 8001044:	6833      	ldrmi	r3, [r6, #0]
 8001046:	3302      	addmi	r3, #2
 8001048:	6033      	strmi	r3, [r6, #0]
 800104a:	6825      	ldr	r5, [r4, #0]
 800104c:	f015 0506 	ands.w	r5, r5, #6
 8001050:	d106      	bne.n	8001060 <_printf_common+0x48>
 8001052:	f104 0a19 	add.w	sl, r4, #25
 8001056:	68e3      	ldr	r3, [r4, #12]
 8001058:	6832      	ldr	r2, [r6, #0]
 800105a:	1a9b      	subs	r3, r3, r2
 800105c:	42ab      	cmp	r3, r5
 800105e:	dc26      	bgt.n	80010ae <_printf_common+0x96>
 8001060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	3b00      	subs	r3, #0
 8001068:	bf18      	it	ne
 800106a:	2301      	movne	r3, #1
 800106c:	0692      	lsls	r2, r2, #26
 800106e:	d42b      	bmi.n	80010c8 <_printf_common+0xb0>
 8001070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001074:	4641      	mov	r1, r8
 8001076:	4638      	mov	r0, r7
 8001078:	47c8      	blx	r9
 800107a:	3001      	adds	r0, #1
 800107c:	d01e      	beq.n	80010bc <_printf_common+0xa4>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	6922      	ldr	r2, [r4, #16]
 8001082:	f003 0306 	and.w	r3, r3, #6
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf02      	ittt	eq
 800108a:	68e5      	ldreq	r5, [r4, #12]
 800108c:	6833      	ldreq	r3, [r6, #0]
 800108e:	1aed      	subeq	r5, r5, r3
 8001090:	68a3      	ldr	r3, [r4, #8]
 8001092:	bf0c      	ite	eq
 8001094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001098:	2500      	movne	r5, #0
 800109a:	4293      	cmp	r3, r2
 800109c:	bfc4      	itt	gt
 800109e:	1a9b      	subgt	r3, r3, r2
 80010a0:	18ed      	addgt	r5, r5, r3
 80010a2:	2600      	movs	r6, #0
 80010a4:	341a      	adds	r4, #26
 80010a6:	42b5      	cmp	r5, r6
 80010a8:	d11a      	bne.n	80010e0 <_printf_common+0xc8>
 80010aa:	2000      	movs	r0, #0
 80010ac:	e008      	b.n	80010c0 <_printf_common+0xa8>
 80010ae:	2301      	movs	r3, #1
 80010b0:	4652      	mov	r2, sl
 80010b2:	4641      	mov	r1, r8
 80010b4:	4638      	mov	r0, r7
 80010b6:	47c8      	blx	r9
 80010b8:	3001      	adds	r0, #1
 80010ba:	d103      	bne.n	80010c4 <_printf_common+0xac>
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c4:	3501      	adds	r5, #1
 80010c6:	e7c6      	b.n	8001056 <_printf_common+0x3e>
 80010c8:	18e1      	adds	r1, r4, r3
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	2030      	movs	r0, #48	@ 0x30
 80010ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80010d2:	4422      	add	r2, r4
 80010d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80010d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80010dc:	3302      	adds	r3, #2
 80010de:	e7c7      	b.n	8001070 <_printf_common+0x58>
 80010e0:	2301      	movs	r3, #1
 80010e2:	4622      	mov	r2, r4
 80010e4:	4641      	mov	r1, r8
 80010e6:	4638      	mov	r0, r7
 80010e8:	47c8      	blx	r9
 80010ea:	3001      	adds	r0, #1
 80010ec:	d0e6      	beq.n	80010bc <_printf_common+0xa4>
 80010ee:	3601      	adds	r6, #1
 80010f0:	e7d9      	b.n	80010a6 <_printf_common+0x8e>
	...

080010f4 <_printf_i>:
 80010f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	7e0f      	ldrb	r7, [r1, #24]
 80010fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80010fc:	2f78      	cmp	r7, #120	@ 0x78
 80010fe:	4691      	mov	r9, r2
 8001100:	4680      	mov	r8, r0
 8001102:	460c      	mov	r4, r1
 8001104:	469a      	mov	sl, r3
 8001106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800110a:	d807      	bhi.n	800111c <_printf_i+0x28>
 800110c:	2f62      	cmp	r7, #98	@ 0x62
 800110e:	d80a      	bhi.n	8001126 <_printf_i+0x32>
 8001110:	2f00      	cmp	r7, #0
 8001112:	f000 80d2 	beq.w	80012ba <_printf_i+0x1c6>
 8001116:	2f58      	cmp	r7, #88	@ 0x58
 8001118:	f000 80b9 	beq.w	800128e <_printf_i+0x19a>
 800111c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001124:	e03a      	b.n	800119c <_printf_i+0xa8>
 8001126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800112a:	2b15      	cmp	r3, #21
 800112c:	d8f6      	bhi.n	800111c <_printf_i+0x28>
 800112e:	a101      	add	r1, pc, #4	@ (adr r1, 8001134 <_printf_i+0x40>)
 8001130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001134:	0800118d 	.word	0x0800118d
 8001138:	080011a1 	.word	0x080011a1
 800113c:	0800111d 	.word	0x0800111d
 8001140:	0800111d 	.word	0x0800111d
 8001144:	0800111d 	.word	0x0800111d
 8001148:	0800111d 	.word	0x0800111d
 800114c:	080011a1 	.word	0x080011a1
 8001150:	0800111d 	.word	0x0800111d
 8001154:	0800111d 	.word	0x0800111d
 8001158:	0800111d 	.word	0x0800111d
 800115c:	0800111d 	.word	0x0800111d
 8001160:	080012a1 	.word	0x080012a1
 8001164:	080011cb 	.word	0x080011cb
 8001168:	0800125b 	.word	0x0800125b
 800116c:	0800111d 	.word	0x0800111d
 8001170:	0800111d 	.word	0x0800111d
 8001174:	080012c3 	.word	0x080012c3
 8001178:	0800111d 	.word	0x0800111d
 800117c:	080011cb 	.word	0x080011cb
 8001180:	0800111d 	.word	0x0800111d
 8001184:	0800111d 	.word	0x0800111d
 8001188:	08001263 	.word	0x08001263
 800118c:	6833      	ldr	r3, [r6, #0]
 800118e:	1d1a      	adds	r2, r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6032      	str	r2, [r6, #0]
 8001194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800119c:	2301      	movs	r3, #1
 800119e:	e09d      	b.n	80012dc <_printf_i+0x1e8>
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	1d19      	adds	r1, r3, #4
 80011a6:	6031      	str	r1, [r6, #0]
 80011a8:	0606      	lsls	r6, r0, #24
 80011aa:	d501      	bpl.n	80011b0 <_printf_i+0xbc>
 80011ac:	681d      	ldr	r5, [r3, #0]
 80011ae:	e003      	b.n	80011b8 <_printf_i+0xc4>
 80011b0:	0645      	lsls	r5, r0, #25
 80011b2:	d5fb      	bpl.n	80011ac <_printf_i+0xb8>
 80011b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	da03      	bge.n	80011c4 <_printf_i+0xd0>
 80011bc:	232d      	movs	r3, #45	@ 0x2d
 80011be:	426d      	negs	r5, r5
 80011c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011c4:	4859      	ldr	r0, [pc, #356]	@ (800132c <_printf_i+0x238>)
 80011c6:	230a      	movs	r3, #10
 80011c8:	e011      	b.n	80011ee <_printf_i+0xfa>
 80011ca:	6821      	ldr	r1, [r4, #0]
 80011cc:	6833      	ldr	r3, [r6, #0]
 80011ce:	0608      	lsls	r0, r1, #24
 80011d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80011d4:	d402      	bmi.n	80011dc <_printf_i+0xe8>
 80011d6:	0649      	lsls	r1, r1, #25
 80011d8:	bf48      	it	mi
 80011da:	b2ad      	uxthmi	r5, r5
 80011dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80011de:	4853      	ldr	r0, [pc, #332]	@ (800132c <_printf_i+0x238>)
 80011e0:	6033      	str	r3, [r6, #0]
 80011e2:	bf14      	ite	ne
 80011e4:	230a      	movne	r3, #10
 80011e6:	2308      	moveq	r3, #8
 80011e8:	2100      	movs	r1, #0
 80011ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80011ee:	6866      	ldr	r6, [r4, #4]
 80011f0:	60a6      	str	r6, [r4, #8]
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	bfa2      	ittt	ge
 80011f6:	6821      	ldrge	r1, [r4, #0]
 80011f8:	f021 0104 	bicge.w	r1, r1, #4
 80011fc:	6021      	strge	r1, [r4, #0]
 80011fe:	b90d      	cbnz	r5, 8001204 <_printf_i+0x110>
 8001200:	2e00      	cmp	r6, #0
 8001202:	d04b      	beq.n	800129c <_printf_i+0x1a8>
 8001204:	4616      	mov	r6, r2
 8001206:	fbb5 f1f3 	udiv	r1, r5, r3
 800120a:	fb03 5711 	mls	r7, r3, r1, r5
 800120e:	5dc7      	ldrb	r7, [r0, r7]
 8001210:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001214:	462f      	mov	r7, r5
 8001216:	42bb      	cmp	r3, r7
 8001218:	460d      	mov	r5, r1
 800121a:	d9f4      	bls.n	8001206 <_printf_i+0x112>
 800121c:	2b08      	cmp	r3, #8
 800121e:	d10b      	bne.n	8001238 <_printf_i+0x144>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	07df      	lsls	r7, r3, #31
 8001224:	d508      	bpl.n	8001238 <_printf_i+0x144>
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	6861      	ldr	r1, [r4, #4]
 800122a:	4299      	cmp	r1, r3
 800122c:	bfde      	ittt	le
 800122e:	2330      	movle	r3, #48	@ 0x30
 8001230:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001234:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001238:	1b92      	subs	r2, r2, r6
 800123a:	6122      	str	r2, [r4, #16]
 800123c:	f8cd a000 	str.w	sl, [sp]
 8001240:	464b      	mov	r3, r9
 8001242:	aa03      	add	r2, sp, #12
 8001244:	4621      	mov	r1, r4
 8001246:	4640      	mov	r0, r8
 8001248:	f7ff fee6 	bl	8001018 <_printf_common>
 800124c:	3001      	adds	r0, #1
 800124e:	d14a      	bne.n	80012e6 <_printf_i+0x1f2>
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	b004      	add	sp, #16
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6023      	str	r3, [r4, #0]
 8001262:	4833      	ldr	r0, [pc, #204]	@ (8001330 <_printf_i+0x23c>)
 8001264:	2778      	movs	r7, #120	@ 0x78
 8001266:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	6831      	ldr	r1, [r6, #0]
 800126e:	061f      	lsls	r7, r3, #24
 8001270:	f851 5b04 	ldr.w	r5, [r1], #4
 8001274:	d402      	bmi.n	800127c <_printf_i+0x188>
 8001276:	065f      	lsls	r7, r3, #25
 8001278:	bf48      	it	mi
 800127a:	b2ad      	uxthmi	r5, r5
 800127c:	6031      	str	r1, [r6, #0]
 800127e:	07d9      	lsls	r1, r3, #31
 8001280:	bf44      	itt	mi
 8001282:	f043 0320 	orrmi.w	r3, r3, #32
 8001286:	6023      	strmi	r3, [r4, #0]
 8001288:	b11d      	cbz	r5, 8001292 <_printf_i+0x19e>
 800128a:	2310      	movs	r3, #16
 800128c:	e7ac      	b.n	80011e8 <_printf_i+0xf4>
 800128e:	4827      	ldr	r0, [pc, #156]	@ (800132c <_printf_i+0x238>)
 8001290:	e7e9      	b.n	8001266 <_printf_i+0x172>
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	f023 0320 	bic.w	r3, r3, #32
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	e7f6      	b.n	800128a <_printf_i+0x196>
 800129c:	4616      	mov	r6, r2
 800129e:	e7bd      	b.n	800121c <_printf_i+0x128>
 80012a0:	6833      	ldr	r3, [r6, #0]
 80012a2:	6825      	ldr	r5, [r4, #0]
 80012a4:	6961      	ldr	r1, [r4, #20]
 80012a6:	1d18      	adds	r0, r3, #4
 80012a8:	6030      	str	r0, [r6, #0]
 80012aa:	062e      	lsls	r6, r5, #24
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	d501      	bpl.n	80012b4 <_printf_i+0x1c0>
 80012b0:	6019      	str	r1, [r3, #0]
 80012b2:	e002      	b.n	80012ba <_printf_i+0x1c6>
 80012b4:	0668      	lsls	r0, r5, #25
 80012b6:	d5fb      	bpl.n	80012b0 <_printf_i+0x1bc>
 80012b8:	8019      	strh	r1, [r3, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	6123      	str	r3, [r4, #16]
 80012be:	4616      	mov	r6, r2
 80012c0:	e7bc      	b.n	800123c <_printf_i+0x148>
 80012c2:	6833      	ldr	r3, [r6, #0]
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	6032      	str	r2, [r6, #0]
 80012c8:	681e      	ldr	r6, [r3, #0]
 80012ca:	6862      	ldr	r2, [r4, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	4630      	mov	r0, r6
 80012d0:	f7fe ff86 	bl	80001e0 <memchr>
 80012d4:	b108      	cbz	r0, 80012da <_printf_i+0x1e6>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	6060      	str	r0, [r4, #4]
 80012da:	6863      	ldr	r3, [r4, #4]
 80012dc:	6123      	str	r3, [r4, #16]
 80012de:	2300      	movs	r3, #0
 80012e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012e4:	e7aa      	b.n	800123c <_printf_i+0x148>
 80012e6:	6923      	ldr	r3, [r4, #16]
 80012e8:	4632      	mov	r2, r6
 80012ea:	4649      	mov	r1, r9
 80012ec:	4640      	mov	r0, r8
 80012ee:	47d0      	blx	sl
 80012f0:	3001      	adds	r0, #1
 80012f2:	d0ad      	beq.n	8001250 <_printf_i+0x15c>
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	079b      	lsls	r3, r3, #30
 80012f8:	d413      	bmi.n	8001322 <_printf_i+0x22e>
 80012fa:	68e0      	ldr	r0, [r4, #12]
 80012fc:	9b03      	ldr	r3, [sp, #12]
 80012fe:	4298      	cmp	r0, r3
 8001300:	bfb8      	it	lt
 8001302:	4618      	movlt	r0, r3
 8001304:	e7a6      	b.n	8001254 <_printf_i+0x160>
 8001306:	2301      	movs	r3, #1
 8001308:	4632      	mov	r2, r6
 800130a:	4649      	mov	r1, r9
 800130c:	4640      	mov	r0, r8
 800130e:	47d0      	blx	sl
 8001310:	3001      	adds	r0, #1
 8001312:	d09d      	beq.n	8001250 <_printf_i+0x15c>
 8001314:	3501      	adds	r5, #1
 8001316:	68e3      	ldr	r3, [r4, #12]
 8001318:	9903      	ldr	r1, [sp, #12]
 800131a:	1a5b      	subs	r3, r3, r1
 800131c:	42ab      	cmp	r3, r5
 800131e:	dcf2      	bgt.n	8001306 <_printf_i+0x212>
 8001320:	e7eb      	b.n	80012fa <_printf_i+0x206>
 8001322:	2500      	movs	r5, #0
 8001324:	f104 0619 	add.w	r6, r4, #25
 8001328:	e7f5      	b.n	8001316 <_printf_i+0x222>
 800132a:	bf00      	nop
 800132c:	08001604 	.word	0x08001604
 8001330:	08001615 	.word	0x08001615

08001334 <__sflush_r>:
 8001334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133c:	0716      	lsls	r6, r2, #28
 800133e:	4605      	mov	r5, r0
 8001340:	460c      	mov	r4, r1
 8001342:	d454      	bmi.n	80013ee <__sflush_r+0xba>
 8001344:	684b      	ldr	r3, [r1, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dc02      	bgt.n	8001350 <__sflush_r+0x1c>
 800134a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd48      	ble.n	80013e2 <__sflush_r+0xae>
 8001350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001352:	2e00      	cmp	r6, #0
 8001354:	d045      	beq.n	80013e2 <__sflush_r+0xae>
 8001356:	2300      	movs	r3, #0
 8001358:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800135c:	682f      	ldr	r7, [r5, #0]
 800135e:	6a21      	ldr	r1, [r4, #32]
 8001360:	602b      	str	r3, [r5, #0]
 8001362:	d030      	beq.n	80013c6 <__sflush_r+0x92>
 8001364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	0759      	lsls	r1, r3, #29
 800136a:	d505      	bpl.n	8001378 <__sflush_r+0x44>
 800136c:	6863      	ldr	r3, [r4, #4]
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001372:	b10b      	cbz	r3, 8001378 <__sflush_r+0x44>
 8001374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	2300      	movs	r3, #0
 800137a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800137c:	6a21      	ldr	r1, [r4, #32]
 800137e:	4628      	mov	r0, r5
 8001380:	47b0      	blx	r6
 8001382:	1c43      	adds	r3, r0, #1
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	d106      	bne.n	8001396 <__sflush_r+0x62>
 8001388:	6829      	ldr	r1, [r5, #0]
 800138a:	291d      	cmp	r1, #29
 800138c:	d82b      	bhi.n	80013e6 <__sflush_r+0xb2>
 800138e:	4a2a      	ldr	r2, [pc, #168]	@ (8001438 <__sflush_r+0x104>)
 8001390:	410a      	asrs	r2, r1
 8001392:	07d6      	lsls	r6, r2, #31
 8001394:	d427      	bmi.n	80013e6 <__sflush_r+0xb2>
 8001396:	2200      	movs	r2, #0
 8001398:	6062      	str	r2, [r4, #4]
 800139a:	04d9      	lsls	r1, r3, #19
 800139c:	6922      	ldr	r2, [r4, #16]
 800139e:	6022      	str	r2, [r4, #0]
 80013a0:	d504      	bpl.n	80013ac <__sflush_r+0x78>
 80013a2:	1c42      	adds	r2, r0, #1
 80013a4:	d101      	bne.n	80013aa <__sflush_r+0x76>
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	b903      	cbnz	r3, 80013ac <__sflush_r+0x78>
 80013aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80013ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013ae:	602f      	str	r7, [r5, #0]
 80013b0:	b1b9      	cbz	r1, 80013e2 <__sflush_r+0xae>
 80013b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013b6:	4299      	cmp	r1, r3
 80013b8:	d002      	beq.n	80013c0 <__sflush_r+0x8c>
 80013ba:	4628      	mov	r0, r5
 80013bc:	f7ff fbf2 	bl	8000ba4 <_free_r>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80013c4:	e00d      	b.n	80013e2 <__sflush_r+0xae>
 80013c6:	2301      	movs	r3, #1
 80013c8:	4628      	mov	r0, r5
 80013ca:	47b0      	blx	r6
 80013cc:	4602      	mov	r2, r0
 80013ce:	1c50      	adds	r0, r2, #1
 80013d0:	d1c9      	bne.n	8001366 <__sflush_r+0x32>
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0c6      	beq.n	8001366 <__sflush_r+0x32>
 80013d8:	2b1d      	cmp	r3, #29
 80013da:	d001      	beq.n	80013e0 <__sflush_r+0xac>
 80013dc:	2b16      	cmp	r3, #22
 80013de:	d11e      	bne.n	800141e <__sflush_r+0xea>
 80013e0:	602f      	str	r7, [r5, #0]
 80013e2:	2000      	movs	r0, #0
 80013e4:	e022      	b.n	800142c <__sflush_r+0xf8>
 80013e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	e01b      	b.n	8001426 <__sflush_r+0xf2>
 80013ee:	690f      	ldr	r7, [r1, #16]
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d0f6      	beq.n	80013e2 <__sflush_r+0xae>
 80013f4:	0793      	lsls	r3, r2, #30
 80013f6:	680e      	ldr	r6, [r1, #0]
 80013f8:	bf08      	it	eq
 80013fa:	694b      	ldreq	r3, [r1, #20]
 80013fc:	600f      	str	r7, [r1, #0]
 80013fe:	bf18      	it	ne
 8001400:	2300      	movne	r3, #0
 8001402:	eba6 0807 	sub.w	r8, r6, r7
 8001406:	608b      	str	r3, [r1, #8]
 8001408:	f1b8 0f00 	cmp.w	r8, #0
 800140c:	dde9      	ble.n	80013e2 <__sflush_r+0xae>
 800140e:	6a21      	ldr	r1, [r4, #32]
 8001410:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001412:	4643      	mov	r3, r8
 8001414:	463a      	mov	r2, r7
 8001416:	4628      	mov	r0, r5
 8001418:	47b0      	blx	r6
 800141a:	2800      	cmp	r0, #0
 800141c:	dc08      	bgt.n	8001430 <__sflush_r+0xfc>
 800141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001426:	81a3      	strh	r3, [r4, #12]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001430:	4407      	add	r7, r0
 8001432:	eba8 0800 	sub.w	r8, r8, r0
 8001436:	e7e7      	b.n	8001408 <__sflush_r+0xd4>
 8001438:	dfbffffe 	.word	0xdfbffffe

0800143c <_fflush_r>:
 800143c:	b538      	push	{r3, r4, r5, lr}
 800143e:	690b      	ldr	r3, [r1, #16]
 8001440:	4605      	mov	r5, r0
 8001442:	460c      	mov	r4, r1
 8001444:	b913      	cbnz	r3, 800144c <_fflush_r+0x10>
 8001446:	2500      	movs	r5, #0
 8001448:	4628      	mov	r0, r5
 800144a:	bd38      	pop	{r3, r4, r5, pc}
 800144c:	b118      	cbz	r0, 8001456 <_fflush_r+0x1a>
 800144e:	6a03      	ldr	r3, [r0, #32]
 8001450:	b90b      	cbnz	r3, 8001456 <_fflush_r+0x1a>
 8001452:	f7ff f9ad 	bl	80007b0 <__sinit>
 8001456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f3      	beq.n	8001446 <_fflush_r+0xa>
 800145e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001460:	07d0      	lsls	r0, r2, #31
 8001462:	d404      	bmi.n	800146e <_fflush_r+0x32>
 8001464:	0599      	lsls	r1, r3, #22
 8001466:	d402      	bmi.n	800146e <_fflush_r+0x32>
 8001468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800146a:	f7ff fb98 	bl	8000b9e <__retarget_lock_acquire_recursive>
 800146e:	4628      	mov	r0, r5
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff ff5f 	bl	8001334 <__sflush_r>
 8001476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001478:	07da      	lsls	r2, r3, #31
 800147a:	4605      	mov	r5, r0
 800147c:	d4e4      	bmi.n	8001448 <_fflush_r+0xc>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	059b      	lsls	r3, r3, #22
 8001482:	d4e1      	bmi.n	8001448 <_fflush_r+0xc>
 8001484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001486:	f7ff fb8b 	bl	8000ba0 <__retarget_lock_release_recursive>
 800148a:	e7dd      	b.n	8001448 <_fflush_r+0xc>

0800148c <__swhatbuf_r>:
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	460c      	mov	r4, r1
 8001490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001494:	2900      	cmp	r1, #0
 8001496:	b096      	sub	sp, #88	@ 0x58
 8001498:	4615      	mov	r5, r2
 800149a:	461e      	mov	r6, r3
 800149c:	da0d      	bge.n	80014ba <__swhatbuf_r+0x2e>
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014a4:	f04f 0100 	mov.w	r1, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2340      	movne	r3, #64	@ 0x40
 80014ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80014b0:	2000      	movs	r0, #0
 80014b2:	6031      	str	r1, [r6, #0]
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	b016      	add	sp, #88	@ 0x58
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
 80014ba:	466a      	mov	r2, sp
 80014bc:	f000 f848 	bl	8001550 <_fstat_r>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	dbec      	blt.n	800149e <__swhatbuf_r+0x12>
 80014c4:	9901      	ldr	r1, [sp, #4]
 80014c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014ce:	4259      	negs	r1, r3
 80014d0:	4159      	adcs	r1, r3
 80014d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d6:	e7eb      	b.n	80014b0 <__swhatbuf_r+0x24>

080014d8 <__smakebuf_r>:
 80014d8:	898b      	ldrh	r3, [r1, #12]
 80014da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014dc:	079d      	lsls	r5, r3, #30
 80014de:	4606      	mov	r6, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	d507      	bpl.n	80014f4 <__smakebuf_r+0x1c>
 80014e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014e8:	6023      	str	r3, [r4, #0]
 80014ea:	6123      	str	r3, [r4, #16]
 80014ec:	2301      	movs	r3, #1
 80014ee:	6163      	str	r3, [r4, #20]
 80014f0:	b003      	add	sp, #12
 80014f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f4:	ab01      	add	r3, sp, #4
 80014f6:	466a      	mov	r2, sp
 80014f8:	f7ff ffc8 	bl	800148c <__swhatbuf_r>
 80014fc:	9f00      	ldr	r7, [sp, #0]
 80014fe:	4605      	mov	r5, r0
 8001500:	4639      	mov	r1, r7
 8001502:	4630      	mov	r0, r6
 8001504:	f7ff fbba 	bl	8000c7c <_malloc_r>
 8001508:	b948      	cbnz	r0, 800151e <__smakebuf_r+0x46>
 800150a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800150e:	059a      	lsls	r2, r3, #22
 8001510:	d4ee      	bmi.n	80014f0 <__smakebuf_r+0x18>
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	e7e2      	b.n	80014e4 <__smakebuf_r+0xc>
 800151e:	89a3      	ldrh	r3, [r4, #12]
 8001520:	6020      	str	r0, [r4, #0]
 8001522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001526:	81a3      	strh	r3, [r4, #12]
 8001528:	9b01      	ldr	r3, [sp, #4]
 800152a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800152e:	b15b      	cbz	r3, 8001548 <__smakebuf_r+0x70>
 8001530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001534:	4630      	mov	r0, r6
 8001536:	f000 f81d 	bl	8001574 <_isatty_r>
 800153a:	b128      	cbz	r0, 8001548 <__smakebuf_r+0x70>
 800153c:	89a3      	ldrh	r3, [r4, #12]
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	81a3      	strh	r3, [r4, #12]
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	431d      	orrs	r5, r3
 800154c:	81a5      	strh	r5, [r4, #12]
 800154e:	e7cf      	b.n	80014f0 <__smakebuf_r+0x18>

08001550 <_fstat_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4d07      	ldr	r5, [pc, #28]	@ (8001570 <_fstat_r+0x20>)
 8001554:	2300      	movs	r3, #0
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	602b      	str	r3, [r5, #0]
 800155e:	f7fe ff1c 	bl	800039a <_fstat>
 8001562:	1c43      	adds	r3, r0, #1
 8001564:	d102      	bne.n	800156c <_fstat_r+0x1c>
 8001566:	682b      	ldr	r3, [r5, #0]
 8001568:	b103      	cbz	r3, 800156c <_fstat_r+0x1c>
 800156a:	6023      	str	r3, [r4, #0]
 800156c:	bd38      	pop	{r3, r4, r5, pc}
 800156e:	bf00      	nop
 8001570:	200001b8 	.word	0x200001b8

08001574 <_isatty_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d06      	ldr	r5, [pc, #24]	@ (8001590 <_isatty_r+0x1c>)
 8001578:	2300      	movs	r3, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	602b      	str	r3, [r5, #0]
 8001580:	f7fe ff1b 	bl	80003ba <_isatty>
 8001584:	1c43      	adds	r3, r0, #1
 8001586:	d102      	bne.n	800158e <_isatty_r+0x1a>
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	b103      	cbz	r3, 800158e <_isatty_r+0x1a>
 800158c:	6023      	str	r3, [r4, #0]
 800158e:	bd38      	pop	{r3, r4, r5, pc}
 8001590:	200001b8 	.word	0x200001b8

08001594 <_sbrk_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4d06      	ldr	r5, [pc, #24]	@ (80015b0 <_sbrk_r+0x1c>)
 8001598:	2300      	movs	r3, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	602b      	str	r3, [r5, #0]
 80015a0:	f7fe ff24 	bl	80003ec <_sbrk>
 80015a4:	1c43      	adds	r3, r0, #1
 80015a6:	d102      	bne.n	80015ae <_sbrk_r+0x1a>
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	b103      	cbz	r3, 80015ae <_sbrk_r+0x1a>
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
 80015b0:	200001b8 	.word	0x200001b8

080015b4 <_init>:
 80015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b6:	bf00      	nop
 80015b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ba:	bc08      	pop	{r3}
 80015bc:	469e      	mov	lr, r3
 80015be:	4770      	bx	lr

080015c0 <_fini>:
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	bf00      	nop
 80015c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c6:	bc08      	pop	{r3}
 80015c8:	469e      	mov	lr, r3
 80015ca:	4770      	bx	lr
